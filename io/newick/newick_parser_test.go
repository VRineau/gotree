package newick_test

import (
	"fmt"
	"github.com/fredericlemoine/gotree/io/newick"
	"strings"
	"testing"
)

// Ensure the parser can parse strings into Statement ASTs.
func TestParser_ParseTree(t *testing.T) {
	goodtrees := [...]string{
		"(Tip2:1.00000,(Tip 7:1.00000,((Tip9[NODE COMMENT]:1.00000,((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000):0.50000,Tip4:0.25000):0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000);",
		"(Tip2:1.00000,(Tip 7:1.00000,((Tip9:1.00000[NODE COMMENT],((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000):0.50000,Tip4:0.25000):0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000);",
		"(Tip2:1.00000,(Tip 7:1.00000,((Tip9:1.00000,((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000)[NODE COMMENT]:0.50000,Tip4:0.25000):0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000);",
		"(Tip2:1.00000,(Tip 7:1.00000,((Tip9:1.00000,((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000):0.50000[NODE COMMENT],Tip4:0.25000):0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000);",
		"(Tip2:1.00000,(Tip 7[NODE COMMENT]:1.00000,((Tip9:1.00000,((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000):0.50000,Tip4:0.25000):0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000);",
		"(Tip2:1.00000,(Tip 7:1.00000,((Tip9[NODE COMMENT]:1.00000,((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000):0.50000,Tip4:0.25000):0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000);",
		"(Tip2:1.00000,(Tip 7:1.00000,((Tip9[NODE COMMENT]:1.00000,((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000)Hello:0.50000,Tip4:0.25000):0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000);",
		"(Tip2:1.00000,(Tip 7:1.00000,((Tip9[NODE COMMENT]:1.00000,((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000)0.999:0.50000,Tip4:0.25000):0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000);",
		"(Tip2:1.00000,(Tip 7:1.00000,((Tip9[NODE COMMENT][HELLO]:1.00000,((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000):0.50000,Tip4:0.25000)0.8:0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000)qsdqsd;",
		"(Tip2:1.00000,(Tip 7:1.00000,((Tip9[NODE COMMENT][HELLO]:1.00000,((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000):0.50000,Tip4:0.25000)0.8:0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000):456;",
	}
	badtrees := [...]string{
		"(Tip2:1.00000,(Tip 7:1.00000,((Tip9:1.00000,((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000):0.50000,Tip4:0.25000):0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000));",
		"(Tip2:1.00000,(Tip 7:1.00000,((Tip9:1.00000[NODE COMMENT],((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000):0.50000,Tip4:0.25000):0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:Hi);",
		"(Tip2:1.00000),(Tip 7:1.00000,((Tip9:1.00000,((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000)[NODE COMMENT]:0.50000,Tip4:0.25000):0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000);",
		"(Tip2:1.00000,(Tip 7:1.00000,((Tip9:1.00000,((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000):0.50000[NODE COMMENT],Tip4:0.25000))))):0.25000):0.50000,Tip3:0.50000):0.25000:0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000);",
		"(Tip2:1.00000,(Tip 7:1.00000,((Tip9:1.00000,((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000):0.50000[NODE COMMENT],Tip4:0.25000)))))))):0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000);",
		"(Tip2:1.00000,[Hello](Tip 7[NODE COMMENT]:1.00000,((Tip9:1.00000,((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000):0.50000,Tip4:0.25000):0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000);",
		"(Tip2:1.00000,([Hello]Tip 7:1.00000,((Tip9[NODE COMMENT]:1.00000,((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000):0.50000,Tip4:0.25000):0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000);",
		"(:1000,Tip2:1.00000,(Tip 7:1.00000,((Tip9[NODE COMMENT]:1.00000,((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000)Hello:0.50000,Tip4:0.25000):0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000);",
		"(Tip2:1.00000,((((Tip 7:1.00000,((Tip9[NODE COMMENT]:1.00000,((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000)0.999:0.50000,Tip4:0.25000):0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000);",
		"(Tip2:1.00000,((((Tip 7:1.00000,((Tip9[NODE COMMENT]:1.00000,((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000):0.50000,Tip4:0.25000)0.8:0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000);",
		"(Tip2:1.00000,(Tip 7:1.00000,((Tip9[NODE COMMENT][HELLO]:1.00000:110,((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000):0.50000,Tip4:0.25000)0.8:0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000);",
		"(Tip2:1.00000,(Tip 7:1.00000,((Tip9[NODE COMMENT]:1.00000:2.00000,((Tip5:1.00000,((Tip8:1.00000,Tip6:0.50000):0.50000,Tip4:0.25000):0.25000):0.50000,Tip3:0.50000):0.25000):0.25000,Node0:0.25000):0.12500):0.12500,Tip1:0.50000);",
	}

	for i, intree := range goodtrees {
		tree, err := newick.NewParser(strings.NewReader(intree)).Parse()
		if err != nil {
			t.Errorf("Tree %d ERROR: %s\n", i, err.Error())
		} else {
			fmt.Println(tree.Newick())
		}
	}

	for i, intree := range badtrees {
		_, err := newick.NewParser(strings.NewReader(intree)).Parse()
		if err == nil {
			t.Errorf("There should be an error with tree %d: %s", i, intree)
		} else {
			fmt.Printf("Tree %d OK: %s\n", i, err.Error())
		}
	}
}
